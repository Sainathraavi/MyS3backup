AWSTemplateFormatVersion: "2010-09-09"

Description: Rainforest EAGLE Stack

Parameters:

  APIName: 
    Type: String
    Description: API Gateway API Name

  APIEnvironment:
    Type: String
    Description:  API Gateway Stage and Deployment name

  LambdaFunctionName: 
    Type: String
    Description: Name Lambda Function


  LambdaRoleARN: 
    Type: String
    Description: IAM Role ARN for Lambda Function

Resources:

##
##  API Gateway Resources  
##

  GatewayAPI: 
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      # Body: JSON object
      # BodyS3Location: S3Location
      # CloneFrom: String
      Description: API Description
      FailOnWarnings: True
      Name: 
        Ref: APIName
      # Parameters:
      #   - String


##
##  API Gateway Resources  
##

  APIGatewayResourceAPI:
    Type: "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId: 
        Ref: GatewayAPI
      ParentId: !GetAtt GatewayAPI.RootResourceId
      PathPart: api

  APIGatewayResourceMeters:
    Type: "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId: 
        Ref: GatewayAPI
      ParentId: 
        Ref: APIGatewayResourceAPI
      PathPart: meters

  APIGatewayResourceRainforest:
    Type: "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId: 
        Ref: GatewayAPI
      ParentId: 
        Ref: APIGatewayResourceMeters
      PathPart: rainforest

##
##  API Gateway Method
##  The associated Lambda function is hardcoded to 'testFunction'
##

  APILambdaMethod:
    Type: "AWS::ApiGateway::Method"
    Properties: 
      RestApiId: 
        Ref: GatewayAPI
      ResourceId: 
        Ref: APIGatewayResourceRainforest

      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

      HttpMethod: ANY
      AuthorizationType: NONE
      Integration: 
        Type: AWS
        # Lambda function is hardcoded
        Uri: {"Fn::Join":
              ["",
                ["arn:aws:apigateway:",
                  {"Ref": "AWS::Region"},
                  ":lambda:path/2015-03-31/functions/",
                  {"Ref": "LambdaFunctionAlias"},
                  #"arn:aws:lambda:us-east-2:547053441796:function:testFunction",
                  "/invocations"
                ]
              ]
            }

        IntegrationResponses:
          - StatusCode: 200
          # can't figure out how to get ResponseTemplate to work          
          #          - ResponseTemplates: "{\"application/json\": \"{}\"}"


        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
          ##  This template will pass through all parameters including path, querystring, header, stage variables, 
          ##  and context through to the integration endpoint via the body/payload        
          "application/xml":
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and 
            ##   context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            "{
            \"body\" : \"$util.escapeJavaScript($input.body)\",
            \"params\" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            \"$type\" : {
                #foreach($paramName in $params.keySet())
                \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            \"stage-variables\" : {
            #foreach($key in $stageVariables.keySet())
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"
                #if($foreach.hasNext),#end
            #end
            },
            \"context\" : {
                \"account-id\" : \"$context.identity.accountId\",
                \"api-id\" : \"$context.apiId\",
                \"api-key\" : \"$context.identity.apiKey\",
                \"authorizer-principal-id\" : \"$context.authorizer.principalId\",
                \"caller\" : \"$context.identity.caller\",
                \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",
                \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",
                \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",
                \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",
                \"http-method\" : \"$context.httpMethod\",
                \"stage\" : \"$context.stage\",
                \"source-ip\" : \"$context.identity.sourceIp\",
                \"user\" : \"$context.identity.user\",
                \"user-agent\" : \"$context.identity.userAgent\",
                \"user-arn\" : \"$context.identity.userArn\",
                \"request-id\" : \"$context.requestId\",
                \"resource-id\" : \"$context.resourceId\",
                \"resource-path\" : \"$context.resourcePath\"
                }
            }"



  Deployment: 
    Type: "AWS::ApiGateway::Deployment"
    Properties: 
      RestApiId: 
        Ref: GatewayAPI
      Description: "Deployment"
      # StageName: 
      #   Ref: APIEnvironment

    DependsOn: APILambdaMethod


  ##
  ##  API Gateway Stage
  ##
  APIStage: 
    Type: "AWS::ApiGateway::Stage"
    Properties: 
      StageName: 
        Ref: APIEnvironment
      Description: "API Stage"
      RestApiId: 
         Ref: GatewayAPI
      DeploymentId: 
        Ref: Deployment

##
##  Lambda Function 
##
  LambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: rainforest.lambda_handler
      FunctionName:
        Ref: LambdaFunctionName
      Role: 
        Ref: LambdaRoleARN
      Code: 
        S3Bucket: loadcoop
        S3Key: config/lambda/rainforest.zip
      Runtime: python2.7
      Timeout: 3


  LambdaInvokePermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: 
        Fn::GetAtt: 
          - "LambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount: 
        Ref: "AWS::AccountId"   

  LambdaFunctionVersion: 
    Type: "AWS::Lambda::Version"
    Properties: 
      FunctionName: 
        Ref: LambdaFunctionName
      Description: "Pre-production version"
    DependsOn: LambdaFunction
    
  LambdaFunctionAlias: 
    Type: "AWS::Lambda::Alias"
    Properties: 
      FunctionName: 
        Ref: LambdaFunctionName
      FunctionVersion: 
        Fn::GetAtt: 
          - LambdaFunctionVersion
          - Version
      Name: Production

Outputs:
  APIRoot:
    Value: !GetAtt GatewayAPI.RootResourceId
  API:
    Value:
      Ref: GatewayAPI